
CurrentVer=5.14
os=`uname`
LOCATION=$(cd $(dirname $0); pwd)
phase=0

#[C+ctrl]検知
trap 'last' {1,2,3,15}
rm $LOCATION/.signal &>/dev/null

killcommand(){

	if [[ $phase -eq 1 ]]; then

		if [[ $defalutblockade = "false" ]]; then

			sed -i -e 's/true/false/g' $CONFIG

		else

			sed -i -e 's/false/true/g' $CONFIG

		fi

	fi

	cd $SERVER/boot

	if [[ -f "backup-$START_LAUNCH" ]]; then
		rm $START_LAUNCH
		mv "backup-$START_LAUNCH" $START_LAUNCH
	fi

	kill `ps aux | grep "start.sh" | grep -v "gnome-terminal" | awk '{print $2}'` &>/dev/null
	kill `ps aux | grep "start-comprun.sh" | grep -v "gnome-terminal" | awk '{print $2}'` &>/dev/null
	kill `ps aux | grep "start-precompute.sh" | grep -v "gnome-terminal" | awk '{print $2}'` &>/dev/null
	kill `ps aux | grep "collapse.jar" | awk '{print $2}'` &>/dev/null
	sleep 0.5
	kill `ps aux | grep "compile.sh" | awk '{print $2}'` &>/dev/null
	kill `ps aux | grep "start.sh -1 -1 -1 -1 -1 -1 localhost" | awk '{print $2}'` &>/dev/null
	kill `ps aux | grep "$SERVER" | awk '{print $2}'` &>/dev/null

	rm $LOCATION/.histry_date &>/dev/null
	rm $LOCATION/.signal &>/dev/null

	#updateスレッドが落ちるまで待機
	while :
	do

		if [[ `jobs | grep 'update' | awk '{print $2}'` = '実行中' ]]; then
			continue
		fi

		break

	done

}

last(){

	if [[ $phase -eq 1 ]]; then

		echo
	  	echo
	  	echo " シミュレーションを中断します...Σ(ﾟДﾟﾉ)ﾉ"
		echo

		if [[ -f $SERVER/boot/logs/kernel.log ]] && [[ ! -z `grep -a -C 0 'Score:' $SERVER/boot/logs/kernel.log | tail -n 1 | awk '{print $5}'` ]]; then

			echo
			echo "◆　これまでのスコア : "`grep -a -C 0 'Score:' $SERVER/boot/logs/kernel.log | tail -n 1 | awk '{print $5}'`
			echo

		fi

	fi

	killcommand

  exit 1

}

errerbreak(){

	echo " 内部で何らかのエラーが発生しました。"
	echo " シミュレーションを終了します....(｡-人-｡) ｺﾞﾒｰﾝ"
	echo

	killcommand

	exit 1

}

kill_subwindow(){

	if [[ -f $LOCATION/.signal ]]; then
	
		last
	
	fi

}

original_clear(){

	for ((i=1;i<`tput lines`;i++))
	do
		
		echo ""
		
	done
	
	echo -e "\e[0;0H" #カーソルを0行目の0列目に戻す

}

update(){

	#自動アップデート
	echo
	echo " ▶▶アップデート確認中..."
	echo

	filename=`echo "$0"`
	histry_Ver=`curl --connect-timeout 1 -s https://raw.githubusercontent.com/Ri--one/bash-rescue/master/histry.txt | grep "RioneLauncher4-newVersion"`

	if [[ ! -z $histry_Ver ]] && [[ ! `echo $histry_Ver | awk '{print $2}'` = $CurrentVer ]]; then

		echo
		echo " ▶▶アップデートします。"
		echo

		killcommand

		IFS=$'\n'
		cat $filename > temp
		rm $filename

		if [[ -z `echo $histry_Ver | awk '{print $4}'` ]]; then
			#ユーザーデータ保持
			cat temp | head -$(grep -n '？↓' temp | sed 's/:/ /g' | sed -n 1P | awk '{print $1}') > temp
